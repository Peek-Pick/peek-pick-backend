version: "3.8"

services:
  db:
    image: pgvector/pgvector:pg16
    container_name: peekpick-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ppdbuser
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: peek_pick_db
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ppdbuser -d peek_pick_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    build:
      context: ./src/main/resources/elasticsearch/
      dockerfile: Dockerfile
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ES_PASSWORD}
      - xpack.security.enabled=true
    ports:
      - "9200:9200"
    healthcheck:
      test: [ "CMD-SHELL", "curl -u elastic:${ES_PASSWORD} http://localhost:9200 || exit 1" ]
      interval: 5s
      retries: 12
      timeout: 3s
#
#  es-init:
#    image: alpine:3.18
#    container_name: elasticsearch-init
#    depends_on:
#      elasticsearch:
#        condition: service_healthy
#    volumes:
#      - ./src/main/resources/elasticsearch:/mnt/elasticsearch
#    entrypoint: /bin/sh
#    command: -c "apk add --no-cache curl && chmod +x /mnt/elasticsearch/setup.sh && /mnt/elasticsearch/setup.sh"

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: peekpick-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DB_PASSWORD: ${DB_PASSWORD}
      ES_PASSWORD: ${ES_PASSWORD}
      ES_HOST: ${ES_HOST}
      ES_PORT: ${ES_PORT}
      ES_USERNAME: ${ES_USERNAME}
      JWT_SECRET: ${JWT_SECRET}
      ORS_API_KEY: ${ORS_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_SUMMARIZER_KEY: ${OPENAI_SUMMARIZER_KEY}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI}
      GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS}
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
#      es-init:
#        condition: service_completed_successfully

volumes:
  pgdata:
